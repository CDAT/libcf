#!/usr/bin/env python

"""
Script to generate config information for python
$Id: generateLibCFConfig.py 913 2012-01-06 00:59:04Z pletzer $
"""

from __future__ import print_function
import re
import time
import os.path

UNSET_VALUE = '123456790'

FMT = """try: %s = %s
except: %s = None"""

# data to extract from config.log file
# syntax:
# name: [strVal, regex]
conf_constants = {
    'CPPFLAGS': ['', re.compile(r"^CPPFLAGS\s*=\s*\'(.*)\'")],
    'USE_NETCDF4': ['0', re.compile(r'^USE_NETCDF4\s+(\d)')],
    'prefix' : ['', re.compile(r"^prefix\s*=\s*\'?([\w\/\-\_\\\:]+)\'?")],
    }

conf_header_constants = {
    'USE_NETCDF4': ['0', re.compile(r'^USE_NETCDF4\s+(\d)')],
    }


from optparse import OptionParser
import sys
import re

def parseHeader(filename):
    nameValue = []
    for oline in open(filename).readlines():
        line = oline.rstrip()

        # 	NC_INT =	4,	/* signed 4 byte integer */
        m = re.match(r'^\s*(NC_\w+)\s*=\s*(\d+)\,?', line)
        if m:
            name, value = m.group(1), m.group(2)
            nameValue.append([name, value])

        if not re.search(r'#define', line): continue
        # don't know what to do with
        if re.search(r'size\_t', line): continue
        # removing casting
        line = re.sub(r'\(\s*char\s*\)', '', line)
        line = re.sub(r'\(\s*char\s*\*\)', '', line)
        line = re.sub(r'\(\s*signed\s+char\s*\)', '', line)
        line = re.sub(r'\(\s*short\s*\)', '', line)
        line = re.sub(r'\(\s*long\s+long\s*\)', '', line)
        line = re.sub(r'\(\s*unsigned\s+long\s+long\s*\)', '', line)
        # remove trailing comment 
        line = re.sub(r'\s*\/\*.*\*?\/?', '', line)
        # remove parentheses around numbers, as in #define NC_EMAXNAME    	(-53)
        line = re.sub(r'\(([^\)]+)\)', '\\1', line)
        # remove trailing f, as in #define NC_MAX_FLOAT 3.402823466e+38f
        line = re.sub(r'e(\-?\+?\d+)f\s*$', 'e\\1', line)
        # remove LL from #define NC_MAX_INT64  9223372036854775807LL
        line = re.sub(r'\s+(\-?\d+)U?L?L?', ' \\1', line)
        # Find the name and value pair
        f1 = '^#define\s+([A-Z\_\d]+)\s+\(?(\"?[!@#$%^&*()|:%\\\/\-\w\d\+\., ]*\"?)\)?\s*' 
        m = re.match(f1, line)
        if m:
           name, value = m.group(1), m.group(2)
           nameValue.append([name, value])
    return nameValue

# parse command line arguments
parser = OptionParser()
parser.add_option("-b", "--buildir", dest="builddir",
                 help="location of build directory",)
parser.add_option("-s", "--srcdir", dest="srcdir",
                 help="location of source directory",)
parser.add_option("-c", "--config", dest="config",
                 help="path to python config file",)
options, args = parser.parse_args()

# parse config.log file
for line in open(options.builddir + '/config.log').readlines():
    for c in conf_constants:
        cvals = conf_constants[c]
        m = re.match(cvals[1], line)
        if m:
            cvals[0] = m.group(1)            

# parse cf_config.h file
for line in open(options.builddir + '/cf_config.h').readlines():
    for c in conf_header_constants:
        cvals = conf_header_constants[c]
        m = re.match(cvals[1], line)
        if m:
            cvals[0] = m.group(1)

def findNetcdfHeader():
    # assumes -I <path>
    incdirs = re.sub(r'\-I\s*', ' ', conf_constants['CPPFLAGS'][0]).split()
    for d in incdirs:
        if os.path.exists(d + '/netcdf.h'):
            return d + '/netcdf.h'
    return ''


# parse netcdf header
netcdf_header = findNetcdfHeader()
nc_constants = []
if netcdf_header:
    nc_constants += parseHeader(netcdf_header)

# libcf headers
libcf_headers = [options.srcdir + '/include/libcf_src.h',
                 options.srcdir + '/include/nccf_constants.h',
                 options.srcdir + '/include/nccf_errors.h',
                 ]
libcf_constants = []
for header in libcf_headers:
    libcf_constants += parseHeader(header)

# generate configure information and save it
# in file config.py
cfg = open(options.config, 'w')
cmd = sys.argv[0]
for a in sys.argv[1:]:
    cmd += ' ' + a
print("""
# DO NOT EDIT THIS FILE!
# This script was auto-generated by running the command:
# %s on %s
""" % (cmd, time.asctime()), file=cfg)
for consts in conf_constants, conf_header_constants:
    for c in consts:
        # write constant in config.py file
        if consts[c][0] == UNSET_VALUE:
            print('Warning: value for ', c, ' was not found!')
        else:
            # put quotes around if value is a string
            try:
                 num = eval(consts[c][0])
                 print('%s = %s' % (c, consts[c][0]), file=cfg)
            except:
                 # failed to evaluate as a number
                 consts[c][0] = '"' + consts[c][0] + '"'
                 print(FMT % (c, consts[c][0], c), file=cfg)

print('# netcdf constants', file=cfg)
for c in nc_constants:
    try:
        num = eval(c[1])
        print('%s = %s' % (c[0], c[1]), file=cfg)
    except:
        print(FMT % (c[0], c[1], c[0]), file=cfg)

print('# libCF constants', file=cfg)
for c in libcf_constants:
    try:
        num = eval(c[1])
        print('%s = %s' % (c[0], c[1]), file=cfg)
    except:
        print(FMT % (c[0], c[1], c[0]), file=cfg)


cfg.close()
