version: 2

checkout:
  post:
    - ./ci-support/checkout_merge_commit.sh
        
aliases:

  - &setup_miniconda
    name: setup_miniconda
    command: |
      mkdir -p workspace
      git clone -b validateNightly --depth 1 git@github.com:CDAT/cdat workspace/cdat
      ls workspace/cdat
      python workspace/cdat/scripts/install_miniconda.py -w $WORKDIR -p $PY_VER
      
  - &create_conda_env
    name: create_conda_env
    environment:
       CHANNELS: "-c cdat/label/nightly -c conda-forge -c cdat"
       PKGS: "hdf5 libnetcdf lapack clapack curl ossuuid numpy"
    command: |
       export PATH=$HOME/project/$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
       if [[ $PY_VER = 'py2' ]]; then
          conda create -n $PY_VER -c conda-forge "python<3" 
          conda install -n $PY_VER $CHANNELS $PKGS 
          conda install -n $PY_VER $CONDA_COMPILER
       else
          conda create -n $PY_VER -c conda-forge "python>3" 
          conda install -n $PY_VER $CHANNELS $PKGS 
          conda install -n $PY_VER $CONDA_COMPILER
       fi

  - &setup_libcf
    name: upload_libcf
    command: |
       export PATH=$HOME/project/$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       echo "CIRCLE CI BRANCH: "$CIRCLE_BRANCH
       echo "CI_PULL_REQUESTS: "$CI_PULL_REQUESTS
       echo "CI_PULL_REQUEST: "$CI_PULL_REQUEST
       export CFLAGS="-Wall -m64 -pipe -O2  -fPIC ${CFLAGS}"
       export CXXFLAGS="${CFLAGS} ${CXXFLAGS}"
       export LFLAGS="-fPIC ${LFLAGS}"
       # somehow looks for fortran but doesn't seem to need it it's pure C
       # looking for fortran makes mac fail
       export FC=""
       pwd
       ls
       echo "xxx running configure $PY_VER"
       export CDAT_ANONYMOUS_LOG=False
       . $HOME/project/$WORKDIR/miniconda/etc/profile.d/conda.sh
       conda activate $PY_VER
       conda list
       export PREFIX=$CONDA_PREFIX
       export CPPFLAGS="-I${PREFIX}/include ${CPPFLAGS}"
       export LDFLAGS="-L${PREFIX}/lib ${LDFLAGS}"
       ./configure --prefix=${PREFIX}
       make
       make install
       echo "xxx running python install"
       if [ $(uname) == "Linux" ]; then
           LDSHARED="$CC -shared -pthread" python setup.py install
       else
           python setup.py install
       fi
       echo "$PY_VER test command exit result:",$RESULT


  - &run_libcf_tests
    name: run_libcf_tests
    command: |
       export PATH=$HOME/project/$WORKDIR/miniconda/bin:$PATH
       export CDAT_ANONYMOUS_LOG=False
       source activate $PY_VER
       python -c "import pycf"
       python -c "import  pycf.libCFConfig"
       RESULT=$?
       echo "*** $PY_VER test result: ",${RESULT}
       exit $RESULT

  - &conda_upload
    name: conda_upload
    command: |
       export PATH=$HOME/project/$WORKDIR/miniconda/bin:$PATH
       export LABEL="nightly";
       if [ $CIRCLE_BRANCH == "master" ]; then
          conda install -n root conda-build anaconda-client
          bash ./ci-support/conda_upload.sh
       fi
       if [ $CIRCLE_BRANCH != "master" ]; then
           export LABEL="unstable";
           echo "NOTE: upload LABEL="${LABEL}
           conda install -n root conda-build anaconda-client;
           bash ./ci-support/conda_upload.sh;
       fi
jobs:
  macos_libcf_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_libcf_py2"
      PY_VER: "py2"
      CONDA_COMPILER: "gcc"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_libcf
      - run: *run_libcf_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  macos_libcf_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: "test_macos_libcf_py3"
      PY_VER: "py3"
      CONDA_COMPILER: "gcc"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_libcf
      - run: *run_libcf_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_libcf_py2:
    machine:
      image: circleci/classic
    environment:
      WORKDIR: "test_linux_libcf_py2"
      PY_VER: "py2"
      CONDA_COMPILER: "gcc_linux-64"
    steps:
      - checkout
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_libcf
      - run: *run_libcf_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

  linux_libcf_py3:
    machine:
      image: circleci/classic
    environment:
      WORKDIR: "test_linux_libcf_py3"
      PY_VER: "py3"
      CONDA_COMPILER: "gcc_linux-64"
      COVERAGE: "-c /home/circleci/project/tests/coverage.json"
    steps:
      - checkout
      - run: pwd
      - run: ls -l
      - run: *setup_miniconda
      - run: *create_conda_env
      - run: *setup_libcf
      - run: *run_libcf_tests
      - run: *conda_upload
      - store_artifacts:
          path: tests_html
          destination: tests_html
      - store_artifacts:
          path: tests_png
          destination: tests_png

workflows:
  version: 2
  libcf_test:
    jobs:
      - macos_libcf_py2
      - macos_libcf_py3:
           requires:
              - macos_libcf_py2
      - linux_libcf_py2
      - linux_libcf_py3:
           requires:
              - linux_libcf_py2

